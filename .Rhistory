var1 <- c(1,3,5,7,9)
var1
# 클론 : 1씩 증가하는 연속된 수(마지막 수 포함) -> 파이썬이랑 다름 R은 1부터 센다(다른 언어는 0)
var2 <- c(1:5)
var2
#seq() : 연속된 값을 지닌 변수 생성(sequence)
var3 <- seq(from = 1, to = 5)
var3
# 숫자 5개로 이루어진 변수
var1 <- c(1,3,5,7,9)
var1
# 클론 : 1씩 증가하는 연속된 수(마지막 수 포함) -> 파이썬이랑 다름 R은 1부터 센다(다른 언어는 0)
var2 <- c(1:5)
var2
#seq() : 연속된 값을 지닌 변수 생성(sequence)
var3 <- seq(from = 1, to = 5)
var3
# seq함수의 간격 조절
var4 <- seq(1, 10, by = 2)
var4
# 숫자 5개로 이루어진 변수
var1 <- c(1,3,5,7,9)
var1
# 클론 : 1씩 증가하는 연속된 수(마지막 수 포함) -> 파이썬이랑 다름 R은 1부터 센다(다른 언어는 0)
var2 <- c(1:5)
var2
#seq() : 연속된 값을 지닌 변수 생성(sequence)
var3 <- seq(from = 1, to = 5)
var3
# seq함수의 간격 조절
var4 <- seq(1, 10, by = 2)
var4
# 등차수열
var5 <- seq(1, 10, length = 5)
var5
# 숫자 5개로 이루어진 변수
var1 <- c(1,3,5,7,9)
var1
# 클론 : 1씩 증가하는 연속된 수(마지막 수 포함) -> 파이썬이랑 다름 R은 1부터 센다(다른 언어는 0)
var2 <- c(1:5)
var2
#seq() : 연속된 값을 지닌 변수 생성(sequence)
var3 <- seq(from = 1, to = 5)
var3
# seq함수의 간격 조절
var4 <- seq(1, 10, by = 2)
var4
# 등차수열
var5 <- seq(1, 10, length = 5)
var5
# 수열 개수 지정
var6 <- seq(1, by = 3, length.out = 4)
var6
# 변수 + 숫자 : 각 변수의 각 값에 2가 더해진 값이 출력
var1 + 2
# Chunk 1
# 변수 생성 방법
a <- 1
b = 3
c <- 1.5
# Chunk 2
# 변수 출력
print(a)
b
c
# Chunk 3
sum(x <- c(1,2))
x
sum(y = 1)
# y
# y를 변수가 아니라 파라미터로 인식
# Chunk 4
a + b
6 / b
2 * c
# Chunk 5
# 숫자 5개로 이루어진 변수
var1 <- c(1,3,5,7,9)
var1
# 클론 : 1씩 증가하는 연속된 수(마지막 수 포함) -> 파이썬이랑 다름 R은 1부터 센다(다른 언어는 0)
var2 <- c(1:5)
var2
#seq() : 연속된 값을 지닌 변수 생성(sequence)
var3 <- seq(from = 1, to = 5)
var3
# seq함수의 간격 조절
var4 <- seq(1, 10, by = 2)
var4
# 등차수열
var5 <- seq(1, 10, length = 5)
var5
# 수열 개수 지정
var6 <- seq(1, by = 3, length.out = 4)
var6
# Chunk 6
# 변수 + 숫자 : 각 변수의 각 값에 2가 더해진 값이 출력
var1 + 2
# 변수 + 숫자 : 각 변수의 각 값에 2가 더해진 값이 출력
var1 + 2
# 변수 + 변수: 같은 순서에 위치한 값끼리 연산
var1 + var2
# 변수 + 변수 연산에서 데이터의 길이가 다를 경우
var1 + var6
str1
str1
str1
str2 <- c("Hello","World","is","good!")
str2
str1 <- "Hello World!"
str1
str1 * 2
x <- c(1,2,3)
x <- c(1,2,3)
# 평균
mean(x)
# 최댓값
max(x)
# 최솟값
min(x)
mean(x)
# 최댓값
max(x)
# 최솟값
min(x)
# paste() : 여러 문자를 합치는 함수
paste("Hello", "World")
paste(str2, collapse = ",")
# ggplot2 패키지 설치
install.packages("ggplot2")
# ggplot2 패키지 로드
library(ggplot2)
data <- c("a","a","b","c")
data <- c("a","a","b","c")
qplot(data)
```
?qplot
# data에 mpg, x축에 hwy 변수 지정하여 그래프 그리기
qplot(data = mpg, x = hwy)
# x축에 cty
qplot(data = mpg, x = cty)
# x축에 drv, y축에 hwy 산점도
qplot(data = mpg, x = drv, y = hwy)
qplot(data = mpg, x = drv, y = hwy, color = manufacturer)
qplot(data = mpg, x = drv, y = hwy, colour = manufacturer)
qplot(data = mpg, x = drv, y = hwy, z = manufacturer)
qplot(data = mpg, x = drv, y = hwy, color = manufacturer)
# x축 drv, y축 hwy 선 그래프
qplot(data = mpg, x =drv, y = hwy, geomo = "line")
# x축 drv, y축 hwy 선 그래프
qplot(data = mpg, x =drv, y = hwy, geomo = "line")
# x축 drv, y축 hwy 선 그래프
qplot(data = mpg, x =drv, y = hwy, geom = "line")
qplot(data = mpg, x =drv, y = hwy, geom = "boxplot")
# x축 drv, y축 hwy 상자 수염 그림, drv별 색 표현
qplot(data = mpg, x =drv, y = hwy, geom = "boxplot", colour = drv)
v1 <- c(1,2,3)
v2 <- c("Hello", "world!")
```{r}
L1 <- list(v1, F1, M1, A1, D3)
L1
L2 <- list(x = 1:4, y = c("A", "B"))
L2
```
M1
![](./R데이터구조2.png)
# 배열 표현법
A1 <- array(data = 1:24, dim = c(4,3,2))
A1
M1
M1 <- matrix(1:9, nrow = 3)
View(M1)
View(M1)
F1
F1 <- factor(c("좋다","보통이다","싫다"),level=c("좋다","보통이다","싫다"), order=T)
F1
# 요인 표현법
F1 <- factor(c("좋다","보통이다","싫다"),level=c("좋다","보통이다","싫다"))
F1
L1
L1 <- list(v1, F1, M1, A1, D3)
L1
D1 <- c(1,2,3)
D2 <- c("A", "B", "C")
D3 <- data.frame(D1,D2)
```
# 배열 표현법
A1 <- array(data = 1:24, dim = c(4,3,2))
A1
L1 <- list(v1, F1, M1, A1, D3)
L1
L2 <- list(x = 1:4, y = c("A", "B"))
L2
list(v1, F1, M1, A1, D3)
L1
L2 <- list(x = 1:4, y = c("A", "B"))
L2
L2$x
L2$y
# 막대그래프로 빈도표 시각화
library(ggplot2)
qplot(mpg$test)
# total을 기준으로 A, B, C, D등급 부여
mpg$grade <- ifelse
# total을 기준으로 A, B, C, D등급 부여
mpg$grade <- ifelse(mpg$total >= 30, "A", ifelse$total >= 25, "B", ifelse(mpg$total >= 20, "C", "D"))
# total을 기준으로 A, B, C, D등급 부여
mpg$grade <- ifelse(mpg$total >= 30, "A", ifelse$total >= 25, "B", ifelse(mpg$total >= 20, "C", "D")))
ifelse(mpg$total >= 20, "C", "D"))#
# total을 기준으로 A, B, C, D등급 부여
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 25, "B",
ifelse(mpg$total >= 20, "C", "D")))
# 막대그래프로 빈도표 시각화
library(ggplot2)
qplot(mpg$test)
# table() : 빈도표를 생성하는 함수
# 연비 합격 빈도표 생성
table(mpg$test)
# 막대그래프로 빈도표 시각화
library(ggplot2)
qplot(mpg$test)
# total을 기준으로 A, B, C, D등급 부여
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 25, "B",
ifelse(mpg$total >= 20, "C", "D")))
head(mpg)
# 고연비의 기준 : total 변수가 20이상이면 pass, 20미만이면 fail을 부여하기로 함.
# ifelse() 조건문으로 파생변수 생성.
# ifelse(조건, 참일때 값, 부정일때 값)
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg, 2)
# 막대그래프로 빈도표 시각화
library(ggplot2)
qplot(mpg$test)
# 고연비의 기준 : total 변수가 20이상이면 pass, 20미만이면 fail을 부여하기로 함.
# ifelse() 조건문으로 파생변수 생성.
# ifelse(조건, 참일때 값, 부정일때 값)
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg, 2)
# 1. 통합 연비 변수 생성
mpg$total <- (mpg$cty + mpg$hwy)/2
head(mpg, 2)
# 고연비의 기준 : total 변수가 20이상이면 pass, 20미만이면 fail을 부여하기로 함.
# ifelse() 조건문으로 파생변수 생성.
# ifelse(조건, 참일때 값, 부정일때 값)
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg, 2)
# 막대그래프로 빈도표 시각화
library(ggplot2)
qplot(mpg$test)
table(mpg$grade)
head(mpg)
table(mpg$grade)
# total을 기준으로 A, B, C, D등급 부여
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 25, "B",
ifelse(mpg$total >= 20, "C", "D")))
table(mpg$grade)
midwer <- as.data.frame(ggplot2::midwest)
head(midwest)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
exam <- read.csv("csv_exam.csv")
head(exam)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# class 가 1인 경우만 추출
exam %>% filter(class == 1)
# class 가 1인 경우만 추출
exam %>%
filter(class == 1)
# class 가 1이 아닌 경우만 추출
exam %>%
filter(class != 1)
# math 가 50을 초과한 경우만 추출
exam %>%
filter(math > 50)
# math 가 50 미만인 경우만 추출
exam %>%
filter(math < 50)
# english가 80이하인 경우만 추출
exam %>%
filter(english <= 80)
# english가 80이상인 경우만 추출
exam %>%
filter(english >= 80)
# class 가 1이면서 math 가 50이상인 경우
exam %>%
filter(class == 1 & math >= 50)
# math 가 90이상이거나 english 가 90이상인 경우
exam %>%
filter(math >= 90 | english >= 90)
# class 가 1, 3, 5에 해당하면 추출
exam %>%
filter(class == 1 | class == 3 | class == 5)
# %in% 이용하기
exam %>%
filter(class %in% c(1,3,5))
# %in% : 매치 연산자(Matching Operator). 변수의 값이 지정한 목록에 해당하는지 확인
head(exam)
class1 <- exam %>%
filter(class == 1)
class1
# class 가 1인 행의 math 평균 구하기
mean(class1$math)
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)
car1 <- mpg %%
filter(displ <= 4)
car2 <- mpg %%
filter(displ >= 5)
mpg <- as.data.frame(ggplot2::mpg)
car1 <- mpg %%
filter(displ <= 4)
car1 <- mpg %%
filter(displ <= 4)
mpg %%
filter(displ <= 4)
mpg
car1 <- mpg %% filter(displ <= 4)
car1 <- mpg %>%
filter(displ <= 4)
car2 <- mpg %>%
filter(displ >= 5)
car1
car2
car1Hwy <- car1 %>%
filter(hwy)
mean(car1$hwy)
mean(car2$hwy)
topCarHwy <- if (mean(car1$hwy) >= mean(car2$hwy))
topCarHwy
if (mean(car1$hwy) >= mean(car2$hwy))
topCarHwy <-mean(car1$hwy)
if (mean(car1$hwy) >= mean(car2$hwy)) topCarHwy <-mean(car1$hwy)
topCarHwy
audi <- mpg %>%
filter(manufacturer == audi)
head(audi)
head(audi)
audi <- mpg %>%
filter(manufacturer == "audi")
head(audi)
mpg
tail(mpg)
mid(mpg)
toyota <- mpg %>%
filter(manufacturer == "toyota")
toyota
audi
audiCty <- mpg %>%
filter(audi$cty)
audiCty
audiCty <- mpg %>%
filter(cty)
audiCty
audiCty <- mpg %>%
filter(audi$cty)
audiCty
audiCty
audi <- mpg %>%
filter(manufacturer == "audi")
audi
audiCty <- audi %>%
filter(audi$cty)
audiCty
audiCty <- audi %>%
filter(audi$cty)
audiCty <- mean(audi$cty)
audiCty
toyota <- mean(toyota$cty)
toyotaCty <- mean(toyota$cty)
toyotaCty
toyota <- mpg %>%
filter(manufacturer == "toyota")
toyota
toyotaCty <- mean(toyota$cty)
toyotaCty
audiCty
ifelse(
audiCty > toyotaCty,
audiCty
)
# 제조사가 audi인 데이터, toyota인 데이터 추출
mpg3 <- mpg %>%
filter(manufacturer == "audi")
mpg4 <- mpg %>%
filter(manufacturer == "toyota")
# chevrolet, ford, honda의 고속도로 연비 평균
mpg5 <- mpg %>%
filter(manufacturer %in% c("chevrolet", "ford", "honda"))
mean(mpg5$hwy)
# exam 데이터에서 math 추출
exam %>%
select(math)
# 여러 변수 추출
# class, math, english 변수 추출
exam %>%
select(class, math, english)
# math, english 제외
exam %>%
select(-math, -english)
# class 가 1인 행에서 english 추출
exam %>%
filter(class == 1) %>%
select(english)
mpgClassCty <- mpg %>% select(class, cty)
mpgClassCty
mpgClass <- mpg %>% select(class(suv))
mpgClass <- mpg %>% select(class$suv)
mpgClass <- mpgClassCty %>% select(class$suv)
mpgClass <- mpgClassCty %>% select(suv)
mpgClass <- mpgClassCty %>% select(class)
mpgClass
mpgClassSuv <- ifelse(class == "suv")
mpgClassSuv <- mpgClass %>%
filter(suv)
mpgClassSuv
mpgClassSuv <- mpgClass %>% filter(suv)
mpgClassSuv <- mpgClass %>% filter(class$suv)
mpgClassSuv
mpgClass <- mpgClassCty %>% select(class$suv, class$compact)
mpgClass
mpgClass <- mpgClassCty %>% filter(class$suv, class$compact)
mpgClass
mpgClass <- mpg %>% filter(class$suv, class$compact)
# class, cty 변수 추출
df <- mpg %>%
select(class, cty)
head(df)
mean(df_suv$cty)
# class, cty 변수 추출
df <- mpg %>%
select(class, cty)
head(df)
df_suv <- df %>% filter(class == "suv")
mean(df_suv$cty)
# class가 compact 인 행 추출 후 평균 cty 분석
df_compact <- df %>% filter(class == "compact")
mean(de_compact$cty)
# exam 데이터 math 오름차순 정렬
exam %>%
arrange(math)
mean(df_suv$cty)
mean(de_compact$cty)
# class가 compact 인 행 추출 후 평균 cty 분석
df_compact <- df %>% filter(class == "compact")
mean(de_compact$cty)
mean(df_compact$cty)
# exam 데이터 math 오름차순 정렬
exam %>%
arrange(math)
# exam 데이터 math 내림차순 정렬
exam %>%
arrange(desc(math))
# 정렬 기준 변수 여러 개 지정
# class 및 math 오름차순 정렬
exam %>%
arrange(class, math)
audi
audi %>%
arrange(desc(hwy))
audiHwy <- audi %>%
arrange(desc(hwy))
audiHwy
head(audiHwy)
mpg %>%
filter(manufacturer == "audi") %>%
arrange(desc(hwy)) %>%
head(5)
# mutate() : 기존 데이터에 파생변수 추가
# mutate(변수명 = 계산식)
# 총합 변수 추가
exam %>%
mutate(total = math + english + science)
head()
# mutate() : 기존 데이터에 파생변수 추가
# mutate(변수명 = 계산식)
# 총합 변수 추가
exam %>%
mutate(total = math + english + science) %>%
head()
# 여러 파생변수 한 번에 추가하기
exam %>%
mutate(total = math + english + science, mean = (math + english + science )/3 ) %>%
head()
# mutate()에 ifelse() 적용하기
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head()
# 추가한 변수를 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total)
# 추가한 변수를 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total) %>%
head()
# mutate()에 ifelse() 적용하기
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head()
# 추가한 변수를 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total) %>%
head()
