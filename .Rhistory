ifelse(mpg$total >= 20, "C", "D")))
table(mpg$grade)
midwer <- as.data.frame(ggplot2::midwest)
head(midwest)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
exam <- read.csv("csv_exam.csv")
head(exam)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
# class 가 1인 경우만 추출
exam %>% filter(class == 1)
# class 가 1인 경우만 추출
exam %>%
filter(class == 1)
# class 가 1이 아닌 경우만 추출
exam %>%
filter(class != 1)
# math 가 50을 초과한 경우만 추출
exam %>%
filter(math > 50)
# math 가 50 미만인 경우만 추출
exam %>%
filter(math < 50)
# english가 80이하인 경우만 추출
exam %>%
filter(english <= 80)
# english가 80이상인 경우만 추출
exam %>%
filter(english >= 80)
# class 가 1이면서 math 가 50이상인 경우
exam %>%
filter(class == 1 & math >= 50)
# math 가 90이상이거나 english 가 90이상인 경우
exam %>%
filter(math >= 90 | english >= 90)
# class 가 1, 3, 5에 해당하면 추출
exam %>%
filter(class == 1 | class == 3 | class == 5)
# %in% 이용하기
exam %>%
filter(class %in% c(1,3,5))
# %in% : 매치 연산자(Matching Operator). 변수의 값이 지정한 목록에 해당하는지 확인
head(exam)
class1 <- exam %>%
filter(class == 1)
class1
# class 가 1인 행의 math 평균 구하기
mean(class1$math)
mpg <- as.data.frame(ggplot2::mpg)
head(mpg)
car1 <- mpg %%
filter(displ <= 4)
car2 <- mpg %%
filter(displ >= 5)
mpg <- as.data.frame(ggplot2::mpg)
car1 <- mpg %%
filter(displ <= 4)
car1 <- mpg %%
filter(displ <= 4)
mpg %%
filter(displ <= 4)
mpg
car1 <- mpg %% filter(displ <= 4)
car1 <- mpg %>%
filter(displ <= 4)
car2 <- mpg %>%
filter(displ >= 5)
car1
car2
car1Hwy <- car1 %>%
filter(hwy)
mean(car1$hwy)
mean(car2$hwy)
topCarHwy <- if (mean(car1$hwy) >= mean(car2$hwy))
topCarHwy
if (mean(car1$hwy) >= mean(car2$hwy))
topCarHwy <-mean(car1$hwy)
if (mean(car1$hwy) >= mean(car2$hwy)) topCarHwy <-mean(car1$hwy)
topCarHwy
audi <- mpg %>%
filter(manufacturer == audi)
head(audi)
head(audi)
audi <- mpg %>%
filter(manufacturer == "audi")
head(audi)
mpg
tail(mpg)
mid(mpg)
toyota <- mpg %>%
filter(manufacturer == "toyota")
toyota
audi
audiCty <- mpg %>%
filter(audi$cty)
audiCty
audiCty <- mpg %>%
filter(cty)
audiCty
audiCty <- mpg %>%
filter(audi$cty)
audiCty
audiCty
audi <- mpg %>%
filter(manufacturer == "audi")
audi
audiCty <- audi %>%
filter(audi$cty)
audiCty
audiCty <- audi %>%
filter(audi$cty)
audiCty <- mean(audi$cty)
audiCty
toyota <- mean(toyota$cty)
toyotaCty <- mean(toyota$cty)
toyotaCty
toyota <- mpg %>%
filter(manufacturer == "toyota")
toyota
toyotaCty <- mean(toyota$cty)
toyotaCty
audiCty
ifelse(
audiCty > toyotaCty,
audiCty
)
# 제조사가 audi인 데이터, toyota인 데이터 추출
mpg3 <- mpg %>%
filter(manufacturer == "audi")
mpg4 <- mpg %>%
filter(manufacturer == "toyota")
# chevrolet, ford, honda의 고속도로 연비 평균
mpg5 <- mpg %>%
filter(manufacturer %in% c("chevrolet", "ford", "honda"))
mean(mpg5$hwy)
# exam 데이터에서 math 추출
exam %>%
select(math)
# 여러 변수 추출
# class, math, english 변수 추출
exam %>%
select(class, math, english)
# math, english 제외
exam %>%
select(-math, -english)
# class 가 1인 행에서 english 추출
exam %>%
filter(class == 1) %>%
select(english)
mpgClassCty <- mpg %>% select(class, cty)
mpgClassCty
mpgClass <- mpg %>% select(class(suv))
mpgClass <- mpg %>% select(class$suv)
mpgClass <- mpgClassCty %>% select(class$suv)
mpgClass <- mpgClassCty %>% select(suv)
mpgClass <- mpgClassCty %>% select(class)
mpgClass
mpgClassSuv <- ifelse(class == "suv")
mpgClassSuv <- mpgClass %>%
filter(suv)
mpgClassSuv
mpgClassSuv <- mpgClass %>% filter(suv)
mpgClassSuv <- mpgClass %>% filter(class$suv)
mpgClassSuv
mpgClass <- mpgClassCty %>% select(class$suv, class$compact)
mpgClass
mpgClass <- mpgClassCty %>% filter(class$suv, class$compact)
mpgClass
mpgClass <- mpg %>% filter(class$suv, class$compact)
# class, cty 변수 추출
df <- mpg %>%
select(class, cty)
head(df)
mean(df_suv$cty)
# class, cty 변수 추출
df <- mpg %>%
select(class, cty)
head(df)
df_suv <- df %>% filter(class == "suv")
mean(df_suv$cty)
# class가 compact 인 행 추출 후 평균 cty 분석
df_compact <- df %>% filter(class == "compact")
mean(de_compact$cty)
# exam 데이터 math 오름차순 정렬
exam %>%
arrange(math)
mean(df_suv$cty)
mean(de_compact$cty)
# class가 compact 인 행 추출 후 평균 cty 분석
df_compact <- df %>% filter(class == "compact")
mean(de_compact$cty)
mean(df_compact$cty)
# exam 데이터 math 오름차순 정렬
exam %>%
arrange(math)
# exam 데이터 math 내림차순 정렬
exam %>%
arrange(desc(math))
# 정렬 기준 변수 여러 개 지정
# class 및 math 오름차순 정렬
exam %>%
arrange(class, math)
audi
audi %>%
arrange(desc(hwy))
audiHwy <- audi %>%
arrange(desc(hwy))
audiHwy
head(audiHwy)
mpg %>%
filter(manufacturer == "audi") %>%
arrange(desc(hwy)) %>%
head(5)
# mutate() : 기존 데이터에 파생변수 추가
# mutate(변수명 = 계산식)
# 총합 변수 추가
exam %>%
mutate(total = math + english + science)
head()
# mutate() : 기존 데이터에 파생변수 추가
# mutate(변수명 = 계산식)
# 총합 변수 추가
exam %>%
mutate(total = math + english + science) %>%
head()
# 여러 파생변수 한 번에 추가하기
exam %>%
mutate(total = math + english + science, mean = (math + english + science )/3 ) %>%
head()
# mutate()에 ifelse() 적용하기
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head()
# 추가한 변수를 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total)
# 추가한 변수를 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total) %>%
head()
# mutate()에 ifelse() 적용하기
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head()
# 추가한 변수를 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total) %>%
head()
exam <- read.csv("csv_exam.csv")
exam <- read.csv("csv_exam.csv")
exam[c(3, 8, 15), "math"] <- NA
head(exam)
# dplyr 패키지 로드
library(dplyr)
# 평균
exam %>%
summarise(mean_math = mean(math))
# 결측치 제외하고 계산한 평균
exam %>%
sumamrise(mean_math = mean(math, na.rm = T))
# 결측치 제외하고 계산한 평균
exam %>%
summarise(mean_math = mean(math, na.rm = T))
# 평균
exam %>%
summarise(mean_math = mean(math))
# 결측치 제외하고 계산한 평균
exam %>%
summarise(mean_math = mean(math, na.rm = T),
sum_math = sum(math, na.rm = T),
median_math = median(math, na.rm = T))
# mpg데이터에 결측치 생성
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(65, 124, 131, 153, 212), "hwy"] <- NA
table(is.na(mpg$hwy))
mpg
table(is.na(mpg$drv))
mpg_drv <- mpg %>% group_by(drv)
mpg_drv
n(mpg_drv)
mpg_drv <- mpg %>% group_by(drv) %>% head(15)
mpg_drv
mpg_drv <- mpg %>% group_by(drv) %>% select(drv, hwy)
mpg_drv
n(mpg_drv)
# ver1
mpg %>%
filter(!is.na(hwy)) %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
# ver2
mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm =T))
df_outlier
# 존재할 수 없는 값 제거
df_outlier <- data.frame( sex = c(1, 2, 1, 3,2 ,1),
score = c(5, 4, 3, 4, 2, 6))
df_outlier
# 이상치 확인하기
table(df_outlier$sex)
table(df_outlier$score)
# sex 가 3이면 NA 할당
df_outlier$sex <- ifelse(df_outlier$sex == 3, NA, df_outlier$sex)
df_outlier
# score 가 1 ~ 5가 아니면 NA 할당
df_outlier$score <- ifelse(df_outlier$score > 5, NA, df_oulier$score)
df_ouliter
df_outlter
# sex 가 3이면 NA 할당
df_outlier$sex <- ifelse(df_outlier$sex == 3, NA, df_outlier$sex)
df_outlier
# score 가 1 ~ 5가 아니면 NA 할당
df_outlier$score <- ifelse(df_outlier$score > 5, NA, df_oulier$score)
df_outlter
df_outlier
# score 가 1 ~ 5가 아니면 NA 할당
df_outlier$score <- ifelse(df_outlier$score > 5, NA, df_oulier$score)
df_outlier
# score 가 1 ~ 5가 아니면 NA 할당
df_outlier$score <- ifelse(df_outlier$score > 5, NA, df_outlier$score)
df_outlier
# 변환된 결측치를 제외하고 분석
df_outlier %>%
filter(!is.na(sex) &
!is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score =
mean(score))
# 변환된 결측치를 제외하고 분석
df_outlier %>%
filter(!is.na(sex) &
!is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score =
mean(score))
![](./boxplot.png)
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
boxplot(mpg$hwy)$stats
# 12 ~ 37 벗어나면 NA 할당
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
table(is.na(mpg$hwy))
# 극단치 정제 후 데이터 분석
mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm = T))
is.na(mpg$drv)
mpg <- as.data.frame(ggplot2::mpg)
is.na(mpg$drv)
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42)
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(10, 14, 58, 93), "drv"] <- "k"
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42)
table(mpg$drv)
table(is.na(mpg$drv))
boxplot(mpg$drv)$stats
boxplot(mpg$drv)
mpg[c(10, 14, 58, 93), "drv"] <- "k"
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42)
table(mpg$drv)
table(mpg$cty)
table(df_outlier$drv)
table(df_outlier$cty)
table(mpg$drv)
table(mpg$cty)
boxplot(mpg_drv)
boxplot(mpg$drv)
boxplot(mpg$drv)
boxplot
mpg_drv_mean <- mean(mpg_drv)
mpg_drv_mean
mean(mpg_drv)
mean(mpg$drv)
boxplot.stats(mpg$drv)
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(10, 14, 58, 93), "drv"] <- "k"
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42)
table(mpg$drv)
table(mpg$cty)
boxplot.stats(mpg$drv)
boxplot(mpg$drv)
# 존재할 수 없는 값 제거
df_outlier <- data.frame( sex = c(1, 2, 1, 3, 2 ,1),
score = c(5, 4, 3, 4, 2, 6))
df_outlier
# 이상치 확인하기
table(df_outlier$sex)
table(df_outlier$score)
# sex 가 3이면 NA 할당
df_outlier$sex <- ifelse(df_outlier$sex == 3, NA, df_outlier$sex)
df_outlier
df_outlier
table(mpg$drv)
table(mpg$cty)
df_outlier$drv <- ifelse(mpg$drv == k , NA, df_outlier$drv)
df_outlier$drv <- ifelse(mpg$drv == "k" , NA, df_outlier$drv)
df_outlier
drv_outlier$drv <- ifelse(mpg$drv == "k" , NA, drv_outlier$drv)
drv_outlier <- ifelse(mpg$drv == "k" , NA, drv_outlier$drv)
drv_outlier <- mpg$drv
drv_outlier <- ifelse(mpg$drv == "k" , NA, drv_outlier$drv)
drv_outlier <- ifelse(mpg$drv == "k" , NA, pure_drv)
drv_outlier <- ifelse(mpg$drv == "k" , NA, drv_outlier)
drv_outlier
table(drv_outlier)
boxplot(mpg$cty)
table(mpg$cty)
mean(mpg$cty)
cty_pure <- ifesle(mpg$cty > 26 | < 9, NA, cty_pure)
cty_pure <- ifesle(mpg$cty > 26 | mpg$cty < 9, NA, cty_pure)
cty_pure <- ifelse(mpg$cty > 26 | mpg$cty < 9, NA, cty_pure)
cty_outlier <- ifelse(mpg$cty > 26 | mpg$cty < 9, NA, cty_outlier)
cty_outlier <- mpg$cty
cty_outlier <- ifelse(mpg$cty > 26 | mpg$cty < 9, NA, cty_outlier)
table(cty_outlier)
boxplot(cty_outlier)
mpg %>% group_by(drv)
mpg %>% group_by(drv) %>% summarise(mean_cty = mean(cty, na.rm = T))
mpg %>% group_by(drv_outlier) %>%
summarise(mean_cty = mean(cty, na.rm = T))
drv_outlier %>% group_by(drv) %>%
summarise(mean_cty = mean(cty, na.rm = T))
mpg %>% group_by(drv) %>%
summarise(mean_cty = mean(cty, na.rm = T))
drv_outlier
table(drv_outlier)
group_by(drv_outlier) %>%
summarise(mean_cty = mean(cty, na.rm = T))
drv <- drv_outlier
mpg %>% group_by(drv) %>%
summarise(mean_cty = mean(cty, na.rm = T))
# 1-2. 이상치를 결측 처리한 후 이상치가 잘 처리되었는지 확인
mpg$drv <- ifelse(mpg$drv %in% c("4", "f", "r"), mpg$drv, NA)
table(mpg$drv)
# 2-1. 상자 그림을 이용해 cty에 이상치가 있는지 확인
boxplot(mpg$cty)$stats
# 2-2. 정상 범위를 벗어난 값을 결측처리.
mpg$cty <- ifelse(mpg$cty < 9 | mpg$cty > 26, NA, mpg%cty)
boxplot(mpg$cty)
# 2-1. 상자 그림을 이용해 cty에 이상치가 있는지 확인
boxplot(mpg$cty)$stats
# 2-2. 정상 범위를 벗어난 값을 결측처리.
mpg$cty <- ifelse(mpg$cty < 9 | mpg$cty > 26, NA, mpg$cty)
boxplot(mpg$cty)
# 3. 이상치를 제외한 다음 drv별로 cty평균이 어떻게 다른지 확인
mpg %>%
filter(!is.na(drv) & !is.na(cty)) %>%
group_by(drv) %>% summarise(mean_cty = mean(cty))
library(ggplot2)
# x축은 displ, y축은 hwy로 지정해 배경 생성
ggplot(data = mpg, aes(x = displ, y = hwy))
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
# x축 범위 3 ~ 6 으로 지정정
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3, 6)
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
# x축 범위 3 ~ 6 으로 지정정
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3, 6)
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
ggplot(data = midwest, aex(x = poptotal, y = popasian)) + geom_point() + xlim( 0,50) + ylim(0 ,1)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point() + xlim( 0,50) + ylim(0 ,1)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point() + xlim( 1,50000) + ylim(0 ,10000)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) +
geom_point() +
xlim(0, 50000) +
ylim(0 ,10000)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) +
geom_point() +
xlim(1 , 50000) +
ylim(1 , 10000)
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
ggplot(data = midwest, aes(x = poptotal, y = popasian)) +
geom_point() +
xlim(1 , 50000) +
ylim(1 , 10000)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) +
geom_point() +
xlim(0 , 500000) +
ylim(0 , 10000)
# 평균 막대 그래프
# mpg 데이터를 이용해 drv별 평균 hwy 막대 그래프 만들기
mpg <- as.data.frame(ggplot2::mpg)
df_mpg <- mpg %>% group_by(drv) %>% summarise(mean_hwy = mean(hwy))
df_mpg
ggplot2(df_mpg)
# 그래프 그리기
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy))
# 그래프 그리기
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_col()
# 크기 순으로 정렬하기
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()
# drv변수 항목별 빈도 막대 그래프
ggplot(data = mpg, aes(x = drv)) + geom_bar()
# 크기 순으로 정렬하기
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) +
geom_col()
# drv변수 항목별 빈도 막대 그래프
ggplot(data = mpg, aes(x = drv)) + geom_bar()
# x축에 연속 변수를 지정하면 값의 분포를 파악할 수 있음음
ggplot(data = mpg, aex(x = hwy)) + geom_bar()
# x축에 연속 변수를 지정하면 값의 분포를 파악할 수 있음음
ggplot(data = mpg, aes(x = hwy)) + geom_bar()
