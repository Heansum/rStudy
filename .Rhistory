# 총합 변수 추가
exam %>%
mutate(total = math + english + science)
head()
# mutate() : 기존 데이터에 파생변수 추가
# mutate(변수명 = 계산식)
# 총합 변수 추가
exam %>%
mutate(total = math + english + science) %>%
head()
# 여러 파생변수 한 번에 추가하기
exam %>%
mutate(total = math + english + science, mean = (math + english + science )/3 ) %>%
head()
# mutate()에 ifelse() 적용하기
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head()
# 추가한 변수를 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total)
# 추가한 변수를 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total) %>%
head()
# mutate()에 ifelse() 적용하기
exam %>%
mutate(test = ifelse(science >= 60, "pass", "fail")) %>%
head()
# 추가한 변수를 바로 활용하기
exam %>%
mutate(total = math + english + science) %>%
arrange(total) %>%
head()
exam <- read.csv("csv_exam.csv")
exam <- read.csv("csv_exam.csv")
exam[c(3, 8, 15), "math"] <- NA
head(exam)
# dplyr 패키지 로드
library(dplyr)
# 평균
exam %>%
summarise(mean_math = mean(math))
# 결측치 제외하고 계산한 평균
exam %>%
sumamrise(mean_math = mean(math, na.rm = T))
# 결측치 제외하고 계산한 평균
exam %>%
summarise(mean_math = mean(math, na.rm = T))
# 평균
exam %>%
summarise(mean_math = mean(math))
# 결측치 제외하고 계산한 평균
exam %>%
summarise(mean_math = mean(math, na.rm = T),
sum_math = sum(math, na.rm = T),
median_math = median(math, na.rm = T))
# mpg데이터에 결측치 생성
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(65, 124, 131, 153, 212), "hwy"] <- NA
table(is.na(mpg$hwy))
mpg
table(is.na(mpg$drv))
mpg_drv <- mpg %>% group_by(drv)
mpg_drv
n(mpg_drv)
mpg_drv <- mpg %>% group_by(drv) %>% head(15)
mpg_drv
mpg_drv <- mpg %>% group_by(drv) %>% select(drv, hwy)
mpg_drv
n(mpg_drv)
# ver1
mpg %>%
filter(!is.na(hwy)) %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
# ver2
mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm =T))
df_outlier
# 존재할 수 없는 값 제거
df_outlier <- data.frame( sex = c(1, 2, 1, 3,2 ,1),
score = c(5, 4, 3, 4, 2, 6))
df_outlier
# 이상치 확인하기
table(df_outlier$sex)
table(df_outlier$score)
# sex 가 3이면 NA 할당
df_outlier$sex <- ifelse(df_outlier$sex == 3, NA, df_outlier$sex)
df_outlier
# score 가 1 ~ 5가 아니면 NA 할당
df_outlier$score <- ifelse(df_outlier$score > 5, NA, df_oulier$score)
df_ouliter
df_outlter
# sex 가 3이면 NA 할당
df_outlier$sex <- ifelse(df_outlier$sex == 3, NA, df_outlier$sex)
df_outlier
# score 가 1 ~ 5가 아니면 NA 할당
df_outlier$score <- ifelse(df_outlier$score > 5, NA, df_oulier$score)
df_outlter
df_outlier
# score 가 1 ~ 5가 아니면 NA 할당
df_outlier$score <- ifelse(df_outlier$score > 5, NA, df_oulier$score)
df_outlier
# score 가 1 ~ 5가 아니면 NA 할당
df_outlier$score <- ifelse(df_outlier$score > 5, NA, df_outlier$score)
df_outlier
# 변환된 결측치를 제외하고 분석
df_outlier %>%
filter(!is.na(sex) &
!is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score =
mean(score))
# 변환된 결측치를 제외하고 분석
df_outlier %>%
filter(!is.na(sex) &
!is.na(score)) %>%
group_by(sex) %>%
summarise(mean_score =
mean(score))
![](./boxplot.png)
boxplot(mpg$hwy)
boxplot(mpg$hwy)$stats
boxplot(mpg$hwy)$stats
# 12 ~ 37 벗어나면 NA 할당
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy > 37, NA, mpg$hwy)
table(is.na(mpg$hwy))
# 극단치 정제 후 데이터 분석
mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy, na.rm = T))
is.na(mpg$drv)
mpg <- as.data.frame(ggplot2::mpg)
is.na(mpg$drv)
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42)
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(10, 14, 58, 93), "drv"] <- "k"
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42)
table(mpg$drv)
table(is.na(mpg$drv))
boxplot(mpg$drv)$stats
boxplot(mpg$drv)
mpg[c(10, 14, 58, 93), "drv"] <- "k"
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42)
table(mpg$drv)
table(mpg$cty)
table(df_outlier$drv)
table(df_outlier$cty)
table(mpg$drv)
table(mpg$cty)
boxplot(mpg_drv)
boxplot(mpg$drv)
boxplot(mpg$drv)
boxplot
mpg_drv_mean <- mean(mpg_drv)
mpg_drv_mean
mean(mpg_drv)
mean(mpg$drv)
boxplot.stats(mpg$drv)
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(10, 14, 58, 93), "drv"] <- "k"
mpg[c(29, 43, 129, 203), "cty"] <- c(3, 4, 39, 42)
table(mpg$drv)
table(mpg$cty)
boxplot.stats(mpg$drv)
boxplot(mpg$drv)
# 존재할 수 없는 값 제거
df_outlier <- data.frame( sex = c(1, 2, 1, 3, 2 ,1),
score = c(5, 4, 3, 4, 2, 6))
df_outlier
# 이상치 확인하기
table(df_outlier$sex)
table(df_outlier$score)
# sex 가 3이면 NA 할당
df_outlier$sex <- ifelse(df_outlier$sex == 3, NA, df_outlier$sex)
df_outlier
df_outlier
table(mpg$drv)
table(mpg$cty)
df_outlier$drv <- ifelse(mpg$drv == k , NA, df_outlier$drv)
df_outlier$drv <- ifelse(mpg$drv == "k" , NA, df_outlier$drv)
df_outlier
drv_outlier$drv <- ifelse(mpg$drv == "k" , NA, drv_outlier$drv)
drv_outlier <- ifelse(mpg$drv == "k" , NA, drv_outlier$drv)
drv_outlier <- mpg$drv
drv_outlier <- ifelse(mpg$drv == "k" , NA, drv_outlier$drv)
drv_outlier <- ifelse(mpg$drv == "k" , NA, pure_drv)
drv_outlier <- ifelse(mpg$drv == "k" , NA, drv_outlier)
drv_outlier
table(drv_outlier)
boxplot(mpg$cty)
table(mpg$cty)
mean(mpg$cty)
cty_pure <- ifesle(mpg$cty > 26 | < 9, NA, cty_pure)
cty_pure <- ifesle(mpg$cty > 26 | mpg$cty < 9, NA, cty_pure)
cty_pure <- ifelse(mpg$cty > 26 | mpg$cty < 9, NA, cty_pure)
cty_outlier <- ifelse(mpg$cty > 26 | mpg$cty < 9, NA, cty_outlier)
cty_outlier <- mpg$cty
cty_outlier <- ifelse(mpg$cty > 26 | mpg$cty < 9, NA, cty_outlier)
table(cty_outlier)
boxplot(cty_outlier)
mpg %>% group_by(drv)
mpg %>% group_by(drv) %>% summarise(mean_cty = mean(cty, na.rm = T))
mpg %>% group_by(drv_outlier) %>%
summarise(mean_cty = mean(cty, na.rm = T))
drv_outlier %>% group_by(drv) %>%
summarise(mean_cty = mean(cty, na.rm = T))
mpg %>% group_by(drv) %>%
summarise(mean_cty = mean(cty, na.rm = T))
drv_outlier
table(drv_outlier)
group_by(drv_outlier) %>%
summarise(mean_cty = mean(cty, na.rm = T))
drv <- drv_outlier
mpg %>% group_by(drv) %>%
summarise(mean_cty = mean(cty, na.rm = T))
# 1-2. 이상치를 결측 처리한 후 이상치가 잘 처리되었는지 확인
mpg$drv <- ifelse(mpg$drv %in% c("4", "f", "r"), mpg$drv, NA)
table(mpg$drv)
# 2-1. 상자 그림을 이용해 cty에 이상치가 있는지 확인
boxplot(mpg$cty)$stats
# 2-2. 정상 범위를 벗어난 값을 결측처리.
mpg$cty <- ifelse(mpg$cty < 9 | mpg$cty > 26, NA, mpg%cty)
boxplot(mpg$cty)
# 2-1. 상자 그림을 이용해 cty에 이상치가 있는지 확인
boxplot(mpg$cty)$stats
# 2-2. 정상 범위를 벗어난 값을 결측처리.
mpg$cty <- ifelse(mpg$cty < 9 | mpg$cty > 26, NA, mpg$cty)
boxplot(mpg$cty)
# 3. 이상치를 제외한 다음 drv별로 cty평균이 어떻게 다른지 확인
mpg %>%
filter(!is.na(drv) & !is.na(cty)) %>%
group_by(drv) %>% summarise(mean_cty = mean(cty))
library(ggplot2)
# x축은 displ, y축은 hwy로 지정해 배경 생성
ggplot(data = mpg, aes(x = displ, y = hwy))
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
# x축 범위 3 ~ 6 으로 지정정
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3, 6)
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
# x축 범위 3 ~ 6 으로 지정정
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point() + xlim(3, 6)
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
ggplot(data = midwest, aex(x = poptotal, y = popasian)) + geom_point() + xlim( 0,50) + ylim(0 ,1)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point() + xlim( 0,50) + ylim(0 ,1)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) + geom_point() + xlim( 1,50000) + ylim(0 ,10000)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) +
geom_point() +
xlim(0, 50000) +
ylim(0 ,10000)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) +
geom_point() +
xlim(1 , 50000) +
ylim(1 , 10000)
ggplot(data = mpg, aes(x = cty, y = hwy)) + geom_point()
ggplot(data = midwest, aes(x = poptotal, y = popasian)) +
geom_point() +
xlim(1 , 50000) +
ylim(1 , 10000)
ggplot(data = midwest, aes(x = poptotal, y = popasian)) +
geom_point() +
xlim(0 , 500000) +
ylim(0 , 10000)
# 평균 막대 그래프
# mpg 데이터를 이용해 drv별 평균 hwy 막대 그래프 만들기
mpg <- as.data.frame(ggplot2::mpg)
df_mpg <- mpg %>% group_by(drv) %>% summarise(mean_hwy = mean(hwy))
df_mpg
ggplot2(df_mpg)
# 그래프 그리기
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy))
# 그래프 그리기
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_col()
# 크기 순으로 정렬하기
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()
# drv변수 항목별 빈도 막대 그래프
ggplot(data = mpg, aes(x = drv)) + geom_bar()
# 크기 순으로 정렬하기
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) +
geom_col()
# drv변수 항목별 빈도 막대 그래프
ggplot(data = mpg, aes(x = drv)) + geom_bar()
# x축에 연속 변수를 지정하면 값의 분포를 파악할 수 있음음
ggplot(data = mpg, aex(x = hwy)) + geom_bar()
# x축에 연속 변수를 지정하면 값의 분포를 파악할 수 있음음
ggplot(data = mpg, aes(x = hwy)) + geom_bar()
library(dplyr)
library(ggplot2)
# 평균표 생성
df_mpg <- mpg %>%
filter(class == "suv") %>%
group_by(manufacturer) %>%
summarise(mean_cty = mean(cty)) %>%
arrange(desc(mean_cty)) %>%
head(5)
df_mpg
# 그래프 그리기
ggplot(data = df_mpg)
# 그래프 그리기
ggplot(data = df_mpg, aes(x = manufacturer))
# 그래프 그리기
ggplot(data = df_mpg, aes(x = manufacturer, y = mean_cty))
# 그래프 그리기
ggplot(data = df_mpg, aes(x = reorder(manufacturer, -mean_cty), y = mean_cty))
# 그래프 그리기
ggplot(data = df_mpg, aes(x = reorder(manufacturer, -mean_cty), y = mean_cty)) + geom_col()
ggplot(data = mpg, aes(x = class))
ggplot(data = mpg, aes(x = class)) + geom_bar()
# economics 데이터 : 미국의 경제 지표들을 월별로 나타낸 데이터
# x축에는 시간, y 축에는 실업자 수를 지정
ggplot(data = economics, aes(x = date), y = unemploy)) + geom_line()
# economics 데이터 : 미국의 경제 지표들을 월별로 나타낸 데이터
# x축에는 시간, y 축에는 실업자 수를 지정
ggplot(data = economics, aes(x = date), y = unemploy) + geom_line()
# economics 데이터 : 미국의 경제 지표들을 월별로 나타낸 데이터
# x축에는 시간, y 축에는 실업자 수를 지정
ggplot(data = economics, aes(x = date, y = unemploy)) + geom_line()
head(economics)
ggplot(data = economics, aes(x = date, y = pasavert)) + geom_line()
ggplot(data = economics, aes(x = date, y = psavert)) + geom_line()
ggplot(data = economics, aes(x = date, y = pop)) + geom_line()
ggplot(data = economics, aes(x = date, y = psavert)) + geom_line()
#mpg 데이터의 drv(구동 방식)별 hwy(고속도로 연비)를 상자 그림으로 표현
ggplot(data = mpg, aes(x = drv, y = hwy)) + geom_boxplot()
ggplot(data = mpg, aes(x = class, y = cty )) + geom_boxplot()
class <- class %>% filter("compact", "subcompact", "suv")
class <- class %>% filter( class == "compact", "subcompact", "suv")
class <- mpg %>% filter( class == "compact", "subcompact", "suv")
class <- mpg %>% filter(class == "compact", "subcompact", "suv")
class <- mpg %>% filter(class == "compact" & "subcompact" & "suv")
class_mpg <- mpg %>% filter(class %in% c("compact", "subcompact", "suv"))
ggplot(data = mpg, aes(x = class, y = cty )) + geom_boxplot()
ggplot(data = mpg, aes(x = class_mpg, y = cty )) + geom_boxplot()
class_mpg <- mpg %>% filter(class %in% c("compact", "subcompact", "suv"))
ggplot(data = mpg, aes(x = class_mpg, y = cty )) + geom_boxplot()
ggplot(data = class_mpg, aes(x = class, y = cty )) + geom_boxplot()
# 평균 막대 그래프
# mpg 데이터를 이용해 drv별 평균 hwy 막대 그래프 만들기
mpg <- as.data.frame(ggplot2::mpg)
df_mpg <- mpg %>% group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
# 평균 막대 그래프
# mpg 데이터를 이용해 drv별 평균 hwy 막대 그래프 만들기
mpg <- as.data.frame(ggplot2::mpg)
df_mpg <- mpg %>% group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
df_mpg
install.packages("stringr")
#install.packages("stringr")
library(stringr)
v1 <- c("aa", "ba", "ccb", "Ab", "Bbc")
str_detect(v1, "a")
v1[1:3]
v1[c(1,3)]
v1[c(T, T, F, F, F)]
v1[str_detect(v1, "a")]
v1[str_detect(v1, "^a")]
v1[str_detect(v1, "^[aA]")]
v1[str_detect(v1, "^[aAbB]")]
v1[str_detect(v1, "^[aA][bB]")]
v1[str_detect(v1, "a$")]
str_count(v1) # 글자 수
str_count(v1, "a")
str_c("vector : ", v1)
str_c("cute", "dog")
str_c("vector : ", v1)
str_c(v1, "name is", v1)
str_c(v1, " name is ", v1)
str_c(v1, collapse = "-")
# 주의점
str_c("a", "b", "c")
str_c(v1)
str_c("a", "b", "c", sep = ",")
str_c(v1, collapse = ",")
str_dup(v1, 3)
str_length("hello")
str_length(v1)
str_locate("abab", "a")
str_locate("abaab", "aa")
str_locate(v1, "a")
v2 <- c("a", "aba", "b", "ababab")
str_locate_all(v2, "a")
class(str_locate_all(v2, "a"))
str_replace("apple", "p", "*")
str_replace("apple", "p", "**")
str_replace_all("apple", "p", "*")
v3 <- c("1,100", "2,300", "3,900")
v3
str_replace(v3, ",", "")
animal
animal <- str_c("pig", "/", "dog", "/", "cat")
animal
str_split(animal, "/")
class(str_split(animal, "/"))
str_sub(animal, 1, 3)
animal
str_sub(animal, 1, 3)
str_sub(animal, 5)
str_sub(animal, -4)
str_trim(" pig dog cat ")
str_trim(" pig dog cat ", side = "left") # 왼쪽 공백 제거
a <- array(1:12, dim = c(3, 4))
a
apply(a, 1, max)
apply(a, 2, max)
apply(a, 1, f)
# 적용할 함수 작성하기
f <- function(vec){
max(vec)^2 + 3
}
apply(a, 1, f)
<img src="./3d_apply_1.jpg>
<img src="./3d_apply_1.jpg">
a <- array(1:24, dim = c(3, 4, 2))
a
apply(a, 1, max)
apply(a, 2, max)
a <- array(sample(24,24), dim = c(3, 4, 2))
a
apply(a, 1, max)
apply(a, 2, max)
apply(a, 3, max)
iris_sample <- iris[1:10, 1:4]
iris_sample
a[2, 4, 1] <- NA
a
a[2, 1, 1] <- NA
a[2, 4, 1] <- NA
apply(a, 1, mean)
apply(a, 2, mean)
apply(a, 1, mean, na.rm = T)
apply(a, 2, mean, na.rm = T)
lapply(a, function(x){x*2})
sapply(a, function(x){x*2})
sapply(a, function(x){x*2}, simplify = F)
head(airquality)
install.packages("reshape")
library(reshape)
#install.packages("reshape")
library(reshape)
# melt 함수
apm <- melt(airquality, id = c("Month", "Day"), na.rm = T)
# melt 함수
apm <- melt(airquality, id = c("Month", "Day"), na.rm = T)
head(apm)
# cast 함수
head(cast(apm, Day~Month~variable))
tail(cast(apm, Day~Month~variable))
head(cast(apm, Month+Day~variable))
head(cast(apm, Month+variable~Day))
head(cast(apm, Month~variable+Day))
head(cast(apm, Month~variable, mean))
head(cast(apm, Day~variable, mean))
head(cast(apm, Month~Day, mean))
install.packages("UsingR")
# install.packages("UsingR")
library(UsingR)
library(ggplot2)
# install.packages("UsingR")
library(UsingR)
library(ggplot2)
# 데이터의 분포를 확인
par(mfrow = c(1, 2))
hist(galton$child, col = "blue", breaks = 100)
hist(galton$parent, col = "blue", breaks = 100)
# 데이터의 분포를 확인
par(mfrow = c(1, 2))
hist(galton$child, col = "blue", breaks = 100)
hist(galton$parent, col = "blue", breaks = 100)
par(mfrow = c(1, 1))
# lm(종속변수 ~ 독립변수, 데이터)
lm_gal <- lm(child ~ parent, data = galton)
summary(lm_gal)
# 그래프로 그려보기
plot(child~parent, data = galton)
abline(lm_gal, col = "red")
head(women)
plot(height~weight, data = women)
par(mfrow = c(1, 2))
hist(women$height, col = "blue", breaks = 100)
hist(women$weight, col = "blue", breaks = 100)
plot(height~weight, data = women)
head(women)
plot(height~weight, data = women)
plot(height~weight, data = women)
par(mfrow = c(1, 1))
plot(height~weight, data = women)
lm_women <- lm(height~weight, data = women)
summary(lm_women)
plot(height~weight, data = women)
abline(lm_women, col = "red")
lm_women <- lm(weight~height, data = women)
head(women)
lm_women <- lm(weight~height, data = women)
summary(lm_women)
plot(weight~height, data = women)
abline(lm_women, col = "red")
install.packages("MASS")
install.packages("MASS")
#install.packages("MASS")
library(MASS)
head(Cars93)
lm(Price ~ EngineSize + RPM)
head(Cars93)
lm(Price ~ EngineSize + RPM + Weight, data = Cars93)
summary(lm(Price ~ EngineSize + RPM + Weight, data = Cars93))
